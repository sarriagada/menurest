<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pic_logo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2Q==
</value>
  </data>
</root>